package org.bitcoins.crypto

import org.bitcoin.NativeSecp256k1
import scodec.bits.ByteVector

/** Public key tests specific to the JVM */
class JvmECPublicKeyTest extends BitcoinSCryptoTest {

  behavior of "JVMECPublicKeytest"

  it must "have serialization symmetry from ECPublicKey -> ECPoint -> ECPublicKey" in {
    CryptoContext.cryptoRuntime match {
      case _: BouncycastleCryptoRuntime | _: LibSecp256k1CryptoRuntime =>
        forAll(CryptoGenerators.publicKey) { pubKey =>
          val p = BouncyCastleUtil.decodePoint(pubKey)
          val pub2 = BouncyCastleUtil.decodePubKey(p, pubKey.isCompressed)
          assert(pubKey == pub2)
        }
      case _ => succeed
    }
  }

  it must "correctly memoize sigpoints" in {
    val subSigPoints = Vector(
      "028FEAB9641766B1B2E31CB59A8C034EDFE19F18742748EF0075E1B1A05AD130C0",
      "0386B677935D899A41ACD6764F295ABDBD282D497429317FA7B8868C9B18732BB1",
      "029F9747D73E11306882BB98BB47045DE2E4EADC5DFD434D38FA0003F39AB329AF",
      "0356206011E9C023CD7852B2074905D4AB2DDFB95C1B200EFCC63EE5542B8F1A3E",
      "03208EE2F655DC51A2B374B0D92382D08C8C47B8392D760BC0DD1B6A7A6BB11B52",
      "03C6A9953B20403F13A186025F8DF0AEE18E24803551A2E6D37D9B2F3F15FE09EC"
    ).map(ByteVector.fromValidHex(_))
    val expectedTree = Vector(
      "048FEAB9641766B1B2E31CB59A8C034EDFE19F18742748EF0075E1B1A05AD130C0F83F02E1AFAAA179E2B0690934700DEA2130C0C8FC940345E22D487641C03B54",
      "0486B677935D899A41ACD6764F295ABDBD282D497429317FA7B8868C9B18732BB160E1849DE98A12A38899184A9EED324BA666122383A35DF36E03299FBD5F34CB",
      "04B4FB519127FAFCA1AD94BB7DA8D3E78C162F66E593D09E287E256629026E677F71A7C7A23932226B58185AE262036A7447E57FE653D9F9D8D5EF0D8C48997403",
      "0436AAB9B19812405E0034CF001B796986BD527C170062FE79E0A9FE42A8C002F9AD8B5EEBCFF0023ECF14C2F335FD8A169B4733D25A03C1DD897A6940E641140E",
      "04175BBCBB6B650EBFA90A86D7359CE08F6D29205B5AE594EE63EC6A40DAB4B0E959F9E177F6125110EF42B2F5A80580EE8B7CD6EDF5876FED89D9DA9EC5E671DF",
      "04DEE23D5D3E29E68DB42B3D5427036AD0106247862524DFBDA5EA2A8119C592833C2AD2C705A517549C93BD914F3C32C5BD30826751B9CA9E6FEB24285A13DE1A",
      "04C76C143F8E91FF13380B55D79E96A92EE7F516539A3B90A488F46112E2CD4293B3889C7C1B6E1023F7BA6CD2A0D3AC95723B2C580792BB0DAE67FA5D58ABAFA0",
      "0460985E58D2D1A76679A9F82C77F80BD15054AA482B9E7E2F6EAA9D565DA2A9AB6485822AF6CE33F683814617857891F724A24AD418E07BDABCB01E91003A0DB0",
      "04C6BAEF2142DE1D06EB443582C347BD276F3DD0DAA7ECCC5150AFE14C7610BBE70CFE7874D83D30775FA4DC6E8D9EA75F78C6759E86D01D50CB95D5270B58FDF5",
      "0407ADED53C1CD6F0CBDF80FD1D87C618E6EC573739BAAF57EBE50008CD0473EF6D5F64CCE67840050A2717B54FCD62B5C5E49D80548FCA4DAB50A4BEEDE0ACD43",
      "0464B9E31AB5589A59B9D77BDDB5ACB67748D97D1F94EBEC9EFC858D97E5B1515BE2C13492247368D12EAB7B7EB0312D76A3C5CB74EC45F1C6E9001B5DF971ECD7",
      "04B9DD242AF50C2BEE0D84B3215A03136909CB0FCCA3D37735EB88B07AB10269A80880D4F784E68119C1C08C94EC5DB2B001DEA19B80FA21B212375A5BE7C698C8",
      "048F0376ECEA4CEE6589A6AE7CD573C53749ED8CBDC65C12516A1A9BCCACE8E6AF59EDCFE5E64BAEE79CD4AF8EDA0F1D68B2E3509BD0347C812BEE8AAF24DE8F0C",
      "04EBA47456564CC13C6FBB88131F8D22EA07E30F19C207323C1964D3B7007C52800DC28EB499AD10DD34B3451D4BBD675916577184FBFF7852D14FC0FF01D9223A"
    ).map(ByteVector.fromValidHex(_))

    val result =
      NativeSecp256k1.pubKeyTableMemoize(subSigPoints.map(_.toArray).toArray)
    assert(result.toVector.map(ByteVector.apply) == expectedTree)
  }
}
